stages:
  - build
  - deploy
  - cleanup

# Указываем явно, что используем shell раннер
default:
  tags:
    - shell

build:
  stage: build
  script:
    - echo "BUILD STARTED!"
    - java -version
    - export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-17.0.11.0.9-2.el9.x86_64 || true
    - docker rmi -f autobackend:latest || true
    - docker build -t autobackend:latest .
    - echo "BUILD COMPLETED!"
  only:
    - master
  allow_failure: false

deploy:
  stage: deploy
  script:
    - echo "DEPLOY STARTED!"
    - mkdir -p /home/admin/projects/auto/back || true
    - cp docker-compose.yml /home/admin/projects/auto/back/ || true
    - cd /home/admin/projects/auto/back

    # Проверить существование сети Docker
    - docker network ls | grep auto_network || docker network create auto_network

    # Остановить существующие контейнеры
    - docker compose down || true

    # Запустить с явно указанными переменными окружения
    - >
      POSTGRES_USER=admin 
      POSTGRES_PASSWORD=Caicoollaoban1 
      POSTGRES_DB=auto 
      MINIO_ROOT_USER=admin 
      MINIO_ROOT_PASSWORD=Caicoollaoban1 
      DOCKER_NETWORK_NAME=auto_network 
      ADMIN_MAIL=drujba_narodov1@mail.ru 
      ADMIN_PASSWORD=Caicoollaoban1 
      docker compose up -d

    - echo "DEPLOY COMPLETED!"
  only:
    - master

cleanup:
  stage: cleanup
  when: always
  script:
    - echo "CLEANUP STARTED!"
    - docker system prune -a -f --volumes --filter "until=24h" || true
    - echo "CLEANUP COMPLETED!"