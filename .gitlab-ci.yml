stages:
  - build
  - deploy
  - cleanup

# Указываем явно, что используем shell раннер
default:
  tags:
    - shell

build:
  stage: build
  script:
    - echo "BUILD STARTED!"
    - java -version
    - export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-17.0.11.0.9-2.el9.x86_64 || true
    - docker rmi -f autobackend:latest || true
    - docker build -t autobackend:latest .
    - echo "BUILD COMPLETED!"
  only:
    - master
  allow_failure: false

deploy:
  stage: deploy
  script:
    - echo "DEPLOY STARTED!"

    # Создаем директорию для бэкенда
    - mkdir -p /home/admin/projects/auto/back/logs

    # Проверяем сеть Docker и создаем, если не существует
    - docker network ls | grep auto_network || docker network create auto_network

    # Создаем docker-compose.yml напрямую, без копирования
    - |
      cat > /home/admin/projects/auto/back/docker-compose.yml << 'EOL'
      version: '3.8'
      
      services:
        backend:
          image: autobackend:latest
          container_name: auto-backend
          restart: always
          ports:
            - "8088:8088"
          environment:
            - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/auto
            - SPRING_DATASOURCE_USERNAME=admin
            - SPRING_DATASOURCE_PASSWORD=Caicoollaoban1
            - MINIO_URL=http://minio:9000
            - MINIO_ACCESS_KEY=admin
            - MINIO_SECRET_KEY=Caicoollaoban1
            - ADMIN_MAIL=drujba_narodov1@mail.ru
            - ADMIN_PASSWORD=Caicoollaoban1
          networks:
            - auto_network
          volumes:
            - ./logs:/logs
      
      networks:
        auto_network:
          external: true
      EOL

    # Запуск контейнеров
    - cd /home/admin/projects/auto/back
    - docker compose down || true
    - docker compose up -d

    - echo "DEPLOY COMPLETED!"
  only:
    - master

cleanup:
  stage: cleanup
  when: always
  script:
    - echo "CLEANUP STARTED!"
    - docker system prune -a -f --volumes --filter "until=24h" || true
    - echo "CLEANUP COMPLETED!"